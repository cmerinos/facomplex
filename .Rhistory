theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = T)
library(facomplex)
plot.simplicity(data = FSI.out$FSI_i,
item.col = "Items",
value.col = "FSI_i",
title = , sort.items = "none",
theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = T)
devtools::install()
facomplex::plotFacomplex(data = FSI.out$FSI_i, item.col = "Items",value.col = "FSI_i")
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
library(facomplex)
library(facomplex)
Hofmann(ex1_data)
BSI(data = ex1_data)
BSI(data = ex1_data, sort_items = "up")
BSI(data = ex1_data, item_names = seq(1:12), sort_items = "down")
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
profileFacomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
FSI.out <- FSI(data = ex1_data,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
FSI.out
plotFacomplex(data = FSI.out$FSI_i,
item.col = "Items",
value.col = "FSI_i",
title = , sort.items = "none",
theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = T)
usethis::use_vignette("intro_facomplex")
browseVignettes("facomplex")
citation("facomplex")
load.table2
load.table2
remove.packages("facomplex")
unlink("~/.Rcache", recursive = TRUE)
devtools::document()
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
unlink("C:/Users/C NINJA/AppData/Local/R/win-library/4.3/facomplex", recursive = TRUE)
unlink("~/.Rcache", recursive = TRUE)
unlink("~/.Rbuildignore", recursive = TRUE)
devtools::document()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
devtools::document()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
.rs.restartR()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
library(facomplex)
facomplex::LSI(loadings = load.table1)
facomplex::LSI(loadings = load.table2)
# Cargar datos
library(psych)
data(bfi)
# Ajustar un modelo factorial de 2 factores sobre 10 ítems
fa.output <- fa(bfi[, 1:10],
nfactors = 2,
rotate = "oblimin",
fm = "uls")
# Obtener matriz de cargas factoriales
fa.load <- as.data.frame(unclass(fa.output$loadings))
# Calcular LSI
LSI(fa.load)
#' lsi <- LSI(ex1_data)
#' cat("Global LSI:", lsi, "\n")
#'
#'@seealso
#'\code{\link{BSI}} for Bentler’s index, \code{\link{FSI}} for Fleming’s index, and \code{\link{plot_simplicity}}
#'for visual inspection of loadings.
#'
#' @author Cesar Merino-Soto
#'
#' @export
LSI <- function(loadings) {
if (!is.matrix(loadings) && !is.data.frame(loadings)) {
stop("The argument 'loadings' must be a matrix or data frame.")
}
L <- as.matrix(loadings)
p <- nrow(L)
r <- ncol(L)
epsilon <- 1e-6
# Paso 1: Normalización por columnas
col_norms <- sqrt(colSums(L^2))
if (any(col_norms == 0)) stop("One or more columns have zero norm (all-zero loadings).")
Lc <- sweep(L, 2, col_norms, FUN = "/")
# Paso 2: Normalización por filas
row_norms <- sqrt(rowSums(Lc^2))
row_norms[row_norms == 0] <- 1
B <- sweep(Lc, 1, row_norms, FUN = "/")
# Paso 3: Cálculo de w
w <- mean(apply(B, 1, function(row) {
sum((row^2 + epsilon) * 10^(row^2)) / r
}))
# Paso 4: Valor mínimo teórico e
bij <- rep(1 / sqrt(r), r)
e <- sum((bij^2 + epsilon) * 10^(bij^2)) / r
# Paso 5: Índice final
LSI_val <- (w - e) / (1 - e)
LSI_val <- max(min(LSI_val, 1), 0)  # Forzar al rango [0,1]
return(round(LSI_val, 4))
}
devtools::document()
rm(LSI)
devtools::document()
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
.rs.restartR()
remove.packages("facomplex")
unlink("C:/Users/C NINJA/AppData/Local/R/win-library/4.3/facomplex", recursive = TRUE)
unlink("~/.Rcache", recursive = TRUE)
unlink("~/.Rbuildignore", recursive = TRUE)
devtools::document()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
# Calcular LSI
LSI(fa.load)
# Calcular LSI
LSI(load.table1)
fa.load
# Calcular LSI
LSI(fa.load)
# Cargar datos
library(psych)
data(bfi)
# Ajustar un modelo factorial de 2 factores sobre 10 ítems
fa.output <- fa(bfi[, 1:10],
nfactors = 2,
rotate = "oblimin",
fm = "uls")
# Obtener matriz de cargas factoriales
fa.load <- as.data.frame(unclass(fa.output$loadings))
# Calcular LSI
LSI(fa.load)
load.table1
fa.load
# Calcular LSI
LSI(load.table1[, 2:4])
load.table1[, 2:4]
# Calcular LSI
LSI(load.table1[, 2:4])
fa.load
Hofmann(data = load.table1[, 2:4])
facomplex::profileFacomplex(load.table1[, 2:4],target = load.table2.items)
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
devtools::document()
devtools::check()
check_removal("LSI")
library(facomplex)
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
remove.packages("facomplex")
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
devtools::document()
devtools::document()
BSI(data = ex1_data)
devtools::document()
library(facomplex)
ex1_data
L <- matrix(c(
0.6, 0.2,
0.5, 0.3,
0.1, 0.7
), nrow = 3, byrow = TRUE)
T <- matrix(c(
1, 0,
1, 0,
0, 1
), nrow = 3, byrow = TRUE)
SSindices(L, T)
L
facomplex::LSI(loadings = load.table2)
facomplex::plotFacomplex(data = FSI.out$FSI_i, item.col = "Items",value.col = "FSI_i")
facomplex::profileFacomplex(load.table1[, 2:4],target = load.table2.items)
facomplex::LSIglobal(loadings = load.table2)
SSindices(L, T)
?SSindices(L, T)
?SSindices
??SSindices
devtools::document()
devtools::document()
?SSindices
example(SSindices)
devtools::install(build_vignettes = TRUE, force = TRUE)
?SSindices
example(SSindices)
lazy.fa::ss_index
?SSindices
ex1_data
library(facomplex)
## Visualizar matriz de cargas factoriales
unclass(fa.output$loadings)
fa.load
## Run Hofmann
Hofmann(fa.load)
## Bentler Simplicity Index
BSI(fa.load)
## Kaiser - Cerny criteria
KC(data = fa.load, b = 4)
## Factor Simplicity index (total, factor, item)
FSI(data = fa.load,
items_target = list(ULS1 = c(6,7,8,9,10),
ULS2 = c(1,2,3,4,5)))
fa.load
# Calcular LSI
LSIglobal(fa.load)
LSIglobal(load.table1[, 2:4])
profileFacomplex(load.table1[, 2:4],target = load.table2.items)
profileFacomplex(load.table1[, 2:4],target = load.table1.items)
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
facomplex::plotFacomplex(data = FSI(data = load.table1[, 2:4], items_target = load.table1.items)$FSI_i,
item.col = "Items",
value.col = "FSI_i")
install_github("lhe17/dicosar")
library(devtools)
install_github("lhe17/dicosar")
load.table1.target <- matrix(0, 23, 3) ## 23:NRO DE ITEMS; 3 :NRO DE FACTORES
load.table1.target[1:9, 1] <- NA ##ITEMS ORDENADOS PARA EL 1ER FACTOR
load.table1.target[10:17, 2] <- NA ##ITEMS ORDENADOS PARA EL 2DO FACTOR
load.table1.target[18:23, 3] <- NA ##ITEMS ORDENADOS PARA EL 3ER FACTOR
load.table1.target
load.table1.target[1:9, 1] <- 1 ##ITEMS ORDENADOS PARA EL 1ER FACTOR
load.table1.target[10:17, 2] <- 1 ##ITEMS ORDENADOS PARA EL 2DO FACTOR
load.table1.target[18:23, 3] <- 1 ##ITEMS ORDENADOS PARA EL 3ER FACTOR
load.table1.target
load.table1
SSindices(loadings = load.table1, target = load.table1.target)
T
load.table1.target
load.table1
SSindices(loadings = load.table1[, 2:4], target = load.table1.target)
fa.load
# SS
fa.load.target <- matrix(0, 10, 2) ## 23:NRO DE ITEMS; 3 :NRO DE FACTORES
fa.load.target
fa.load.target
fa.load.target[6:10, 1] <- 1 ##ITEMS ORDENADOS PARA EL 1ER FACTOR
fa.load.target[1:5, 2] <- 1 ##ITEMS ORDENADOS PARA EL 2DO FACTOR
fa.load.target
SSindices(loadings = fa.load, target = fa.load.target)
detach("package:facomplex", unload = TRUE)
library(facomplex)
SSindices(loadings = fa.load, target = fa.load.target)
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
facomplex::SSindices(loadings = fa.load, target = fa.load.target)
devtools::document()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
.rs.restartR()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
#### facomplex: Example 1 ####
library(facomplex)
profileFacomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
FSI.out <- FSI(data = ex1_data,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
FSI.out
SSindices(loadings = fa.load, target = fa.load.target)
fa.load
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = F)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = F)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
fa.load
fa.load.target
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
remove.packages("facomplex")
.rs.restartR()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
#### facomplex: Example 1 ####
library(facomplex)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
#' SSindices: Target-Based Simple Structure Indices
#'
#' Computes three target-based indices of factorial simplicity:
#' \code{SStarget}, \code{SSntarget}, and their ratio \code{SSratio}.
#' These quantify how much of the total explained variance is aligned
#' with a predefined target structure versus misaligned (cross-loading) variance.
#'
#' @param loadings A numeric matrix or data frame of factor loadings (items × factors).
#' @param target A binary matrix or data frame of the same dimensions as \code{loadings},
#' indicating the expected loading structure: 1 = expected (target) loading, 0 = non-target.
#' @param per.factor Logical. If TRUE, returns a data frame with indices computed per factor (column). Default is FALSE.
#'
#' @return A data.frame with:
#' \itemize{
#'   \item \code{SStarget}: Proportion of total explained variance due to target loadings.
#'   \item \code{SSntarget}: Proportion of variance explained by non-target (cross) loadings.
#'   \item \code{SSratio}:The ratio between target and non-target variance (\code{SStarget / SSntarget}). Values >1 indicate dominance of the expected structure.
#' }
#'
#' @details
#' This function builds on the logic of \code{lazy.fa::ss_index}, which evaluates off-diagonal
#' complexity based on squared loadings. \code{SSindices()} extends the concept by incorporating
#' a user-defined binary target structure, allowing explicit evaluation of how well the factor
#' solution conforms to theoretical expectations.
#'
#' \strong{Interpretation of the indices:}
#' \itemize{
#'   \item \code{SStarget}: Proportion of total variance that is aligned with the expected structure.
#'   Higher values indicate clearer factor-item alignment.
#'   \item \code{SSntarget}: Proportion of variance explained by unexpected (non-target or cross) loadings.
#'   Reflects the degree of noise or factorial complexity in the solution.
#'   \item \code{SSratio}: The ratio between expected and non-expected variance.
#'         It indicates how dominant the expected structure is over residual complexity.
#' }
#'
#' \strong{Interpreting SSntarget (cross-loading contribution):}
#' \itemize{
#'   \item \code{≈ 0.00}: Perfectly simple structure (each item loads clearly on only one factor).
#'   \item \code{< 0.05}: Very good factor differentiation.
#'   \item \code{0.05 – 0.15}: Moderate cross-loading complexity.
#'   \item \code{> 0.15}: Substantial interdependence or noise across factors.
#' }
#'
#' \strong{Interpreting SSratio:}
#' \itemize{
#'   \item \code{> 4}: Excellent structure – target pattern clearly dominates.
#'   \item \code{2 – 4}: Good structure with acceptable noise.
#'   \item \code{1 – 2}: Target and cross-loadings are comparable – caution advised.
#'   \item \code{≈ 1}: Equal contribution – borderline structure.
#'   \item \code{< 1}: Cross-loadings dominate – weak or misaligned structure.
#' }
#'
#' @examples
#' L <- matrix(c(
#'   0.6, 0.2,
#'   0.5, 0.3,
#'   0.1, 0.7
#' ), nrow = 3, byrow = TRUE)
#'
#' T <- matrix(c(
#'   1, 0,
#'   1, 0,
#'   0, 1
#' ), nrow = 3, byrow = TRUE)
#'
#' SSindices(L, T)
#' SSindices(L, T, per.factor = TRUE)
#'
#' @references
#' Thurstone, L. L. (1947). *Multiple factor analysis*. University of Chicago Press.
#'
#' @export
SSindices <- function(loadings, target, per.factor = FALSE) {
L <- as.matrix(loadings)
T <- as.matrix(target)
if (!all(dim(L) == dim(T))) {
stop("Dimensions of 'loadings' and 'target' must match.")
}
L2 <- L^2
if (isTRUE(per.factor)) {
results <- apply(seq_len(ncol(L)), 1, function(j) {
total_var_j <- sum(L2[, j])
if (total_var_j == 0) {
c(SStarget = NA, SSntarget = NA, SSratio = NA)
} else {
var_target_j <- sum(L2[, j] * T[, j])
var_nontarget_j <- sum(L2[, j] * (1 - T[, j]))
SStarget_j <- var_target_j / total_var_j
SSntarget_j <- var_nontarget_j / total_var_j
SSratio_j <- if (SSntarget_j == 0) Inf else SStarget_j / SSntarget_j
c(SStarget = round(SStarget_j, 4),
SSntarget = round(SSntarget_j, 4),
SSratio = round(SSratio_j, 4))
}
})
return(as.data.frame(t(results), row.names = paste0("Factor", seq_len(ncol(L)))))
} else {
total_var <- sum(L2)
var_target <- sum(L2 * T)
var_nontarget <- sum(L2 * (1 - T))
SStarget <- var_target / total_var
SSntarget <- var_nontarget / total_var
SSratio <- if (SSntarget == 0) Inf else SStarget / SSntarget
result <- data.frame(
SStarget = round(SStarget, 4),
SSntarget = round(SSntarget, 4),
SSratio = round(SSratio, 4)
)
return(result)
}
}
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = F)
#'   0, 1
#' ), nrow = 3, byrow = TRUE)
#'
#' SSindices(L, T)
#' SSindices(L, T, per.factor = TRUE)
#'
#' @references
#' Thurstone, L. L. (1947). *Multiple factor analysis*. University of Chicago Press.
#'
#' @export
SSindices <- function(loadings, target, per.factor = FALSE) {
L <- as.matrix(loadings)
T <- as.matrix(target)
if (!all(dim(L) == dim(T))) {
stop("Dimensions of 'loadings' and 'target' must match.")
}
L2 <- L^2
if (isTRUE(per.factor)) {
results <- sapply(seq_len(ncol(L)), function(j) {
total_var_j <- sum(L2[, j])
if (total_var_j == 0) {
c(SStarget = NA, SSntarget = NA, SSratio = NA)
} else {
var_target_j <- sum(L2[, j] * T[, j])
var_nontarget_j <- sum(L2[, j] * (1 - T[, j]))
SStarget_j <- var_target_j / total_var_j
SSntarget_j <- var_nontarget_j / total_var_j
SSratio_j <- if (SSntarget_j == 0) Inf else SStarget_j / SSntarget_j
c(SStarget = round(SStarget_j, 4),
SSntarget = round(SSntarget_j, 4),
SSratio = round(SSratio_j, 4))
}
})
return(as.data.frame(t(results), row.names = paste0("Factor", seq_len(ncol(L)))))
} else {
total_var <- sum(L2)
var_target <- sum(L2 * T)
var_nontarget <- sum(L2 * (1 - T))
SStarget <- var_target / total_var
SSntarget <- var_nontarget / total_var
SSratio <- if (SSntarget == 0) Inf else SStarget / SSntarget
result <- data.frame(
SStarget = round(SStarget, 4),
SSntarget = round(SSntarget, 4),
SSratio = round(SSratio, 4)
)
return(result)
}
}
SSindices(loadings = fa.load, target = fa.load.target, per.factor = F)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
rm(SSindices)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
facomplex::SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
.rs.restartR()
devtools::document()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
#### facomplex: Example 1 ####
library(facomplex)
facomplex::SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
unlink("C:/Users/C NINJA/AppData/Local/R/win-library/4.3/facomplex", recursive = TRUE)
unlink("~/.Rcache", recursive = TRUE)
unlink("~/.Rbuildignore", recursive = TRUE)
.rs.restartR()
devtools::document()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE, force = TRUE)
#### facomplex: Example 1 ####
library(facomplex)
fa.load.target
facomplex::SSindices(loadings = fa.load, target = fa.load.target, per.factor = F)
facomplex::SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
devtools::document()
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
unlink("C:/Users/C NINJA/AppData/Local/R/win-library/4.3/facomplex", recursive = TRUE)
unlink("~/.Rcache", recursive = TRUE)
unlink("~/.Rbuildignore", recursive = TRUE)
.rs.restartR()
devtools::document()
devtools::install(build_vignettes = TRUE, force = TRUE)
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
unlink("C:/Users/C NINJA/AppData/Local/R/win-library/4.3/facomplex", recursive = TRUE)
unlink("~/.Rcache", recursive = TRUE)
unlink("~/.Rbuildignore", recursive = TRUE)
.rs.restartR()
devtools::document()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
.rs.restartR()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
facomplex::SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
