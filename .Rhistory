SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
fa.load
fa.load.target
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
remove.packages("facomplex")
.rs.restartR()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
#### facomplex: Example 1 ####
library(facomplex)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
#' SSindices: Target-Based Simple Structure Indices
#'
#' Computes three target-based indices of factorial simplicity:
#' \code{SStarget}, \code{SSntarget}, and their ratio \code{SSratio}.
#' These quantify how much of the total explained variance is aligned
#' with a predefined target structure versus misaligned (cross-loading) variance.
#'
#' @param loadings A numeric matrix or data frame of factor loadings (items × factors).
#' @param target A binary matrix or data frame of the same dimensions as \code{loadings},
#' indicating the expected loading structure: 1 = expected (target) loading, 0 = non-target.
#' @param per.factor Logical. If TRUE, returns a data frame with indices computed per factor (column). Default is FALSE.
#'
#' @return A data.frame with:
#' \itemize{
#'   \item \code{SStarget}: Proportion of total explained variance due to target loadings.
#'   \item \code{SSntarget}: Proportion of variance explained by non-target (cross) loadings.
#'   \item \code{SSratio}:The ratio between target and non-target variance (\code{SStarget / SSntarget}). Values >1 indicate dominance of the expected structure.
#' }
#'
#' @details
#' This function builds on the logic of \code{lazy.fa::ss_index}, which evaluates off-diagonal
#' complexity based on squared loadings. \code{SSindices()} extends the concept by incorporating
#' a user-defined binary target structure, allowing explicit evaluation of how well the factor
#' solution conforms to theoretical expectations.
#'
#' \strong{Interpretation of the indices:}
#' \itemize{
#'   \item \code{SStarget}: Proportion of total variance that is aligned with the expected structure.
#'   Higher values indicate clearer factor-item alignment.
#'   \item \code{SSntarget}: Proportion of variance explained by unexpected (non-target or cross) loadings.
#'   Reflects the degree of noise or factorial complexity in the solution.
#'   \item \code{SSratio}: The ratio between expected and non-expected variance.
#'         It indicates how dominant the expected structure is over residual complexity.
#' }
#'
#' \strong{Interpreting SSntarget (cross-loading contribution):}
#' \itemize{
#'   \item \code{≈ 0.00}: Perfectly simple structure (each item loads clearly on only one factor).
#'   \item \code{< 0.05}: Very good factor differentiation.
#'   \item \code{0.05 – 0.15}: Moderate cross-loading complexity.
#'   \item \code{> 0.15}: Substantial interdependence or noise across factors.
#' }
#'
#' \strong{Interpreting SSratio:}
#' \itemize{
#'   \item \code{> 4}: Excellent structure – target pattern clearly dominates.
#'   \item \code{2 – 4}: Good structure with acceptable noise.
#'   \item \code{1 – 2}: Target and cross-loadings are comparable – caution advised.
#'   \item \code{≈ 1}: Equal contribution – borderline structure.
#'   \item \code{< 1}: Cross-loadings dominate – weak or misaligned structure.
#' }
#'
#' @examples
#' L <- matrix(c(
#'   0.6, 0.2,
#'   0.5, 0.3,
#'   0.1, 0.7
#' ), nrow = 3, byrow = TRUE)
#'
#' T <- matrix(c(
#'   1, 0,
#'   1, 0,
#'   0, 1
#' ), nrow = 3, byrow = TRUE)
#'
#' SSindices(L, T)
#' SSindices(L, T, per.factor = TRUE)
#'
#' @references
#' Thurstone, L. L. (1947). *Multiple factor analysis*. University of Chicago Press.
#'
#' @export
SSindices <- function(loadings, target, per.factor = FALSE) {
L <- as.matrix(loadings)
T <- as.matrix(target)
if (!all(dim(L) == dim(T))) {
stop("Dimensions of 'loadings' and 'target' must match.")
}
L2 <- L^2
if (isTRUE(per.factor)) {
results <- apply(seq_len(ncol(L)), 1, function(j) {
total_var_j <- sum(L2[, j])
if (total_var_j == 0) {
c(SStarget = NA, SSntarget = NA, SSratio = NA)
} else {
var_target_j <- sum(L2[, j] * T[, j])
var_nontarget_j <- sum(L2[, j] * (1 - T[, j]))
SStarget_j <- var_target_j / total_var_j
SSntarget_j <- var_nontarget_j / total_var_j
SSratio_j <- if (SSntarget_j == 0) Inf else SStarget_j / SSntarget_j
c(SStarget = round(SStarget_j, 4),
SSntarget = round(SSntarget_j, 4),
SSratio = round(SSratio_j, 4))
}
})
return(as.data.frame(t(results), row.names = paste0("Factor", seq_len(ncol(L)))))
} else {
total_var <- sum(L2)
var_target <- sum(L2 * T)
var_nontarget <- sum(L2 * (1 - T))
SStarget <- var_target / total_var
SSntarget <- var_nontarget / total_var
SSratio <- if (SSntarget == 0) Inf else SStarget / SSntarget
result <- data.frame(
SStarget = round(SStarget, 4),
SSntarget = round(SSntarget, 4),
SSratio = round(SSratio, 4)
)
return(result)
}
}
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = F)
#'   0, 1
#' ), nrow = 3, byrow = TRUE)
#'
#' SSindices(L, T)
#' SSindices(L, T, per.factor = TRUE)
#'
#' @references
#' Thurstone, L. L. (1947). *Multiple factor analysis*. University of Chicago Press.
#'
#' @export
SSindices <- function(loadings, target, per.factor = FALSE) {
L <- as.matrix(loadings)
T <- as.matrix(target)
if (!all(dim(L) == dim(T))) {
stop("Dimensions of 'loadings' and 'target' must match.")
}
L2 <- L^2
if (isTRUE(per.factor)) {
results <- sapply(seq_len(ncol(L)), function(j) {
total_var_j <- sum(L2[, j])
if (total_var_j == 0) {
c(SStarget = NA, SSntarget = NA, SSratio = NA)
} else {
var_target_j <- sum(L2[, j] * T[, j])
var_nontarget_j <- sum(L2[, j] * (1 - T[, j]))
SStarget_j <- var_target_j / total_var_j
SSntarget_j <- var_nontarget_j / total_var_j
SSratio_j <- if (SSntarget_j == 0) Inf else SStarget_j / SSntarget_j
c(SStarget = round(SStarget_j, 4),
SSntarget = round(SSntarget_j, 4),
SSratio = round(SSratio_j, 4))
}
})
return(as.data.frame(t(results), row.names = paste0("Factor", seq_len(ncol(L)))))
} else {
total_var <- sum(L2)
var_target <- sum(L2 * T)
var_nontarget <- sum(L2 * (1 - T))
SStarget <- var_target / total_var
SSntarget <- var_nontarget / total_var
SSratio <- if (SSntarget == 0) Inf else SStarget / SSntarget
result <- data.frame(
SStarget = round(SStarget, 4),
SSntarget = round(SSntarget, 4),
SSratio = round(SSratio, 4)
)
return(result)
}
}
SSindices(loadings = fa.load, target = fa.load.target, per.factor = F)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
rm(SSindices)
SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
facomplex::SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
.rs.restartR()
devtools::document()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
#### facomplex: Example 1 ####
library(facomplex)
facomplex::SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
unlink("C:/Users/C NINJA/AppData/Local/R/win-library/4.3/facomplex", recursive = TRUE)
unlink("~/.Rcache", recursive = TRUE)
unlink("~/.Rbuildignore", recursive = TRUE)
.rs.restartR()
devtools::document()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE, force = TRUE)
#### facomplex: Example 1 ####
library(facomplex)
fa.load.target
facomplex::SSindices(loadings = fa.load, target = fa.load.target, per.factor = F)
facomplex::SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
devtools::document()
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
unlink("C:/Users/C NINJA/AppData/Local/R/win-library/4.3/facomplex", recursive = TRUE)
unlink("~/.Rcache", recursive = TRUE)
unlink("~/.Rbuildignore", recursive = TRUE)
.rs.restartR()
devtools::document()
devtools::install(build_vignettes = TRUE, force = TRUE)
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
unlink("C:/Users/C NINJA/AppData/Local/R/win-library/4.3/facomplex", recursive = TRUE)
unlink("~/.Rcache", recursive = TRUE)
unlink("~/.Rbuildignore", recursive = TRUE)
.rs.restartR()
devtools::document()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
.rs.restartR()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
facomplex::SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
devtools::document()
data("fullclean")
BSI(data = ex1_data)
BSI(data = ex1_data, sort_items = "up")
BSI(data = ex1_data, item_names = seq(1:12), sort_items = "down")
profileFacomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
FSI.out
FSI(data = ex1_data,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6,7),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
FSI.out
plotFacomplex(data = FSI.out$FSI_i,
item.col = "Items",
value.col = "FSI_i",
title = , sort.items = "none",
theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = T)
## Visualizar matriz de cargas factoriales
unclass(fa.output$loadings)
## Run Hofmann
Hofmann(fa.load)
## Bentler Simplicity Index
BSI(fa.load)
## Kaiser - Cerny criteria
KC(data = fa.load, b = 4)
## Factor Simplicity index (total, factor, item)
FSI(data = fa.load,
items_target = list(ULS1 = c(6,7,8,9,10),
ULS2 = c(1,2,3,4,5)))
# Calcular LSI
LSIglobal(fa.load)
fa.load.target
facomplex::SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
HofmannFac(ex1_data)
HofmannFac(fa.load)
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
Hofmann(data = load.table1[, 2:4])
BSI(data = load.table1[, 2:4])
HofmannFac(data = load.table1[, 2:4])
HofmannFac(datos = load.table1[, 2:4])
KC(data = load.table1[, 2:4])
LSIglobal(load.table1[, 2:4])
profileFacomplex(load.table1[, 2:4],target = load.table1.items)
facomplex::plotFacomplex(data = FSI(data = load.table1[, 2:4], items_target = load.table1.items)$FSI_i,
item.col = "Items",
value.col = "FSI_i")
SSindices(loadings = load.table1[, 2:4], target = load.table1.target)
facomplex::plotFacomplex(data = FSI(data = load.table1[, 2:4],
items_target = load.table1.items)$FSI_i,
item.col = "Items",
value.col = "FSI_i")
plotFacomplex(data = FSI.out,
item.col = "Items",
value.col = "FSI_i",
title = , sort.items = "none",
theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = T)
plotFacomplex(data = FSI.out$FSI_i,
item.col = "Items",
value.col = "FSI_i",
title = , sort.items = "none",
theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = T)
facomplex::plotFacomplex(data = FSI(data = load.table1[, 2:4],
items_target = load.table1.items)$FSI_i,
item.col = "Items",
value.col = "FSI_i", sort.items = "none")
FSI.out$FSI_i
plotFacomplex(data = FSI.out$FSI_i,
item.col = "Items",
value.col = "FSI_i",
title = , sort.items = "none",
theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = T)
FSI.out$FSI_i
plotFacomplex(data = FSI.out$FSI_i,
item.col = "Items",
value.col = "FSI_i",
title = , sort.items = "none",
theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = T)
plotFacomplex(data = FSI.out$FSI_i,
item.col = "Items",
value.col = "FSI_i",
title = , sort.items = "none",
theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = TRUE)
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
devtools::document()
facomplex::SSindices(loadings = fa.load, target = fa.load.target, per.factor = T)
HofmannFac(fa.load)
facomplex::SSindices
rm(T)
rm(L)
facomplex::
fa.load
library(facomplex)
BSI(data = fa.load)
Hofmann(data = fa.load)
devtools::document()
HofmannFac(data = fa.load)
fa.load
HofmannFac(datos = fa.load)
devtools::document()
HofmannFac(data = fa.load)
devtools::document()
Hofmann(data = fa.load)
HofmannFac(data = fa.load)
devtools::document()
devtools::document()
Hofmann(data = fa.load)
devtools::document()
Hofmann(data = fa.load)
devtools::document()
Hofmann(data = fa.load)
HofmannFac(data = fa.load)
devtools::document()
#######################################
ex1_fl <- data.frame(
F1 = c(0.536, 0.708, 0.600, 0.673, 0.767, 0.481, -0.177, 0.209, -0.097, -0.115, 0.047, 0.024),
F2 = c(-0.110, 0.026, 0.076, 0.011, -0.160, 0.106, 0.668, 0.438, 0.809, 0.167, 0.128, 0.041),
F3 = c(-0.100, 0.036, 0.086, 0.021, -0.150, 0.116, 0.678, 0.448, 0.819, 0.577, 0.738, 0.751) )
simload(data = ex1_fl,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
BSI(data = ex1_fl)
devtools::document()
simload(data = ex1_fl,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
devtools::document()
simload(data = ex1_fl,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
devtools::document()
#######################################
Hofmann(data = fa.load)
HofmannFac(data = fa.load)
simload(data = ex1_fl,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
#######################################
KC(data = ex1_fl)
devtools::document()
devtools::document()
#######################################
facomplex::LSIglobal(ex1_fl)
facomplex::LSIglobal
#######################################
SSindices(loadings = ex1_fl, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), per.factor = F)
#######################################
SSindices(loadings = ex1_fl, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), per.factor = T)
#######################################
SSindices(loadings = ex1_fl, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(9, 10, 11, 12)), per.factor = T)
Lx <- matrix(c(
0.6, 0.2,
0.5, 0.3,
0.1, 0.7), nrow = 3, byrow = TRUE)
Tx <- matrix(c(
1, 0,
1, 0,
0, 1), nrow = 3, byrow = TRUE)
SSindices(Lx, Tx)
SSindices(Lx, Tx, per.factor = TRUE)
#######################################
SSindices(loadings = ex1_fl, target = data.frame(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), per.factor = T)
data.frame(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12))
Tx
matrix(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12))
#######################################
SSindices(loadings = ex1_fl,
target = data.frame(F1 = c(1, 1, 1, 1, 1, 1),
F2 = c(1, 1, 1),
F3 = c(1, 1, 1)), per.factor = T)
matrix(3,12)
matrix(NA,3,12)
matrix(NA,12,3)
matrix(0,12,3)
matrix(1,1:6,3)
matrix(1,1:6)
targetLoad <- matrix(data = 0, nrow = 12, ncol = 3)
targetLoad(1,1:6)
targetLoad <- matrix(data = 0, nrow = 12, ncol = 3)
targetLoad
targetLoad(1,1:6, 1)
targetLoad <- matrix(data = 0, nrow = 12, ncol = 3)
targetLoad(1:6, 1)  <- 1
targetLoad[1:6, 1]  <- 1
targetLoad
targetLoad[7:9, 1]  <- 1
targetLoad[10:12, 1]  <- 1
targetLoad
targetLoad <- matrix(data = 0, nrow = 12, ncol = 3)
targetLoad[1:6, 1]  <- 1
targetLoad[7:9, 2]  <- 1
targetLoad[10:12, 3]  <- 1
targetLoad
rm(Lx)
rm(Tx)
SSindices(loadings = ex1_fl,
target = targetLoad, per.factor = T)
simload(data = ex1_fl,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
bmcload.table3 <- read.table(file = “clipboard”, sep = “\t”, header=T)
read.table(file = “clipboard”, sep = “\t”, header=T)
bmcload.table3 <- read.table(file = “clipboard”, sep = “\t”, header=T)
read.table(file = “clipboard”, sep = “\t”, header=T)
read.table
bmcload.table3 <- read.table(file =  "clipboard", sep = “\t”, header=T)
bmcload.table3 <- read.table(file =  "clipboard", sep = "\t", header=T)
bmcload.table3
BSI(data = bmcload.table3)
class(bmcload.table3)
bmcload.table3 <- as.data.frame(sapply(bmcload.table3, as.numeric))
bmcload.table3
bmcload.table3[3,2]
bmcload.table3[3,2] <- -.051
bmcload.table3
bmcload.table3[4,3] <- -.043
BSI(data = bmcload.table3)
HofmannFac(bmcload.table3)
T
SSindices(loadings = bmcload.table3)
targetLoad <- matrix(data = 0, nrow = 17, ncol = 3)
targetLoad[1:6, 1]  <- 1
targetLoad[7:12, 2]  <- 1
targetLoad[13:17, 3]  <- 1
targetLoad
BSI(data = bmcload.table3)
HofmannFac(bmcload.table3)
targetLoad
SSindices(loadings = bmcload.table3, targetLoad)
SSindices(loadings = bmcload.table3, target = targetLoad)
bmcload.table3
targetLoad <- matrix(data = 0, nrow = 16, ncol = 3)
targetLoad[1:6, 1]  <- 1
targetLoad[7:11, 2]  <- 1
targetLoad[12:16, 3]  <- 1
targetLoad
SSindices(loadings = bmcload.table3, target = targetLoad)
SSindices(loadings = bmcload.table3, target = targetLoad, per.factor = T)
#######################################
targetLoad2 <- matrix(data = 0, nrow = 12, ncol = 3)
targetLoad2[1:6, 1]  <- 1
targetLoad2[7:9, 2]  <- 1
targetLoad2[10:12, 3]  <- 1
targetLoad2
SSindices(loadings = ex1_fl,
target = targetLoad2, per.factor = T)
simload(data = ex1_fl,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
