result_list <- list()
for (f in names(target)) {
items_f <- target[[f]]
other_factors <- setdiff(colnames(loadings), f)
# Verifica existencia de ítems
if (!all(items_f %in% rownames(loadings))) {
stop(paste("Some items for factor", f, "are not found in `loadings`."))
}
load_f <- loadings[items_f, , drop = FALSE]
target_vals <- load_f[[f]]
cross_vals <- as.matrix(load_f[, other_factors, drop = FALSE])
# Estadísticos descriptivos
stat <- c(
Mean.Target = mean(target_vals),
Median.Target = median(target_vals),
SD.Target = sd(target_vals),
Mean.Cross = mean(cross_vals),
Median.Cross = median(cross_vals),
SD.Cross = sd(cross_vals)
)
# Si hay cutoff, calcular % por debajo/encima
if (!is.null(cutoff)) {
total_cross <- length(cross_vals)
below <- mean(cross_vals <= cutoff) * 100
above <- mean(cross_vals > cutoff) * 100
cutoff.label <- formatC(cutoff, format = "f", digits = 2)
stat[paste0("Perc.Cross.≤.", cutoff.label)] <- below
stat[paste0("Perc.Cross.>.", cutoff.label)] <- above
}
stat["n.Items"] <- length(items_f)
result_list[[f]] <- round(stat, digits)
}
# Convertir lista a data.frame largo
df <- do.call(cbind, result_list)
stat_names <- rownames(df)
df <- data.frame(Statistic = stat_names, df, row.names = NULL)
return(df)
}
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
detach("package:facomplex", unload = TRUE)
devtools::document()
###########################################
detach("package:facomplex", unload = TRUE)
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
data("fullclean")
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
library(facomplex)
?profile.facomplex
devtools::document()
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
#'                      .10, .70), ncol = 2, byrow = TRUE)
#' rownames(loadings) <- c("item1", "item2", "item3", "item4")
#' colnames(loadings) <- c("F1", "F2")
#'
#' target <- list(F1 = c("item1", "item2"),
#'                F2 = c("item3", "item4"))
#'
#' profile.facomplex(loadings, target, cutoff = 0.30)
#'
#' @export
profile.facomplex <- function(loadings, target, abs = TRUE, cutoff = NULL, digits = 3) {
if (!is.matrix(loadings) && !is.data.frame(loadings)) {
stop("`loadings` must be a matrix or data.frame.")
}
loadings <- as.data.frame(loadings)
if (is.null(rownames(loadings))) {
stop("`loadings` must have row names (item names).")
}
if (!all(names(target) %in% colnames(loadings))) {
stop("All names in `target` must match column names in `loadings`.")
}
if (abs) loadings <- abs(loadings)
result_list <- list()
for (f in names(target)) {
items_f <- target[[f]]
other_factors <- setdiff(colnames(loadings), f)
if (!all(items_f %in% rownames(loadings))) {
stop(paste("Some items for factor", f, "are not found in `loadings`."))
}
load_f <- loadings[items_f, , drop = FALSE]
target_vals <- load_f[[f]]
cross_vals <- as.matrix(load_f[, other_factors, drop = FALSE])
stat <- c(
Mean.Target = mean(target_vals),
Median.Target = median(target_vals),
SD.Target = sd(target_vals),
Min.Target = min(target_vals),
Max.Target = max(target_vals),
Mean.Cross = mean(cross_vals),
Median.Cross = median(cross_vals),
SD.Cross = sd(cross_vals),
Min.Cross = min(cross_vals),
Max.Cross = max(cross_vals)
)
if (!is.null(cutoff)) {
total_cross <- length(cross_vals)
below <- mean(cross_vals <= cutoff) * 100
above <- mean(cross_vals > cutoff) * 100
cutoff.label <- formatC(cutoff, format = "f", digits = 2)
stat[paste0("Perc.Cross.≤.", cutoff.label)] <- below
stat[paste0("Perc.Cross.>.", cutoff.label)] <- above
}
stat["n.Items"] <- length(items_f)
result_list[[f]] <- round(stat, digits)
}
df <- do.call(cbind, result_list)
stat_names <- rownames(df)
df <- data.frame(Statistic = stat_names, df, row.names = NULL)
return(df)
}
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
?profile.facomplex
??profile.facomplex
?profile.facomplex
library(facomplex)
detach("package:facomplex", unload = TRUE)
library(facomplex)
detach("package:facomplex", unload = TRUE)
library(facomplex)
detach("package:facomplex", unload = TRUE)
library(facomplex)
remove.packages("facomplex")
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
devtools::document()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
library(facomplex)
ex1_data <- data.frame(
F1 = c(0.536, 0.708, 0.600, 0.673, 0.767, 0.481, -0.177, 0.209, -0.097, -0.115, 0.047, 0.024),
F2 = c(-0.110, 0.026, 0.076, 0.011, -0.160, 0.106, 0.668, 0.438, 0.809, 0.167, 0.128, 0.041),
F3 = c(-0.100, 0.036, 0.086, 0.021, -0.150, 0.116, 0.678, 0.448, 0.819, 0.577, 0.738, 0.751))
Hofmann(ex1_data)
BSI(data = ex1_data)
BSI(data = ex1_data, sort_items = "up")
BSI(data = ex1_data, item_names = seq(1:12), sort_items = "down")
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1,)
FSI.out <- FSI(data = ex1_data,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
FSI.out
?profile.facomplex
library(facomplex)
detach("package:facomplex", unload = TRUE)
library(facomplex)
detach("package:facomplex", unload = TRUE)
library(facomplex)
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
unlink("~/.Rcache", recursive = TRUE)
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
library(facomplex)
library(facomplex)
detach("package:facomplex", unload = TRUE)
data("fullclean")
Hofmann(ex1_data)
library(facomplex)
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
library(facomplex)
Hofmann(ex1_data)
BSI(data = ex1_data)
BSI(data = ex1_data, sort_items = "up")
BSI(data = ex1_data, item_names = seq(1:12), sort_items = "down")
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
browseVignettes("facomplex")
citation("facomplex")
devtools::document()
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
FSI.out <- FSI(data = ex1_data,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
FSI.out
?profile.facomplex
plot.simplicity(data = FSI.out$FSI_i,
item.col = "Items",
value.col = "FSI_i",
title = , sort.items = "none",
theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = T)
FSI.out
FSI(data = ex1_data,
items_target = list(F1 = c(7, 2, 3, 4, 5, 6),
F2 = c(1, 8, 9),
F3 = c(10, 11, 12)))
load.table1 <- read.table(file = "clipboard", sep = "\t", header=TRUE)
Chofman(data = load.table1[, 2:4])
Hofmann(data = load.table1[, 2:4])
BSI(data = load.table1[, 2:4])
KC(data = load.table1[, 2:4])
load.table1.items <- list(F1 = c(1,2,3,4,5,6,7,8),
F2 = c(9,10,11,12,13,14,15,16),
F3 = c(17,18,19,20,21,22,23))
load.table1
FSI(datos = load.table1, items_target = load.table1.items)
FSI(data = load.table1, items_target = load.table1.items)
load.table1.items <- list(F1 = c(1,4,6,11,13,15,17,18,20),
F2 = c(9,10,11,12,13,14,15,16),
F3 = c(17,18,19,20,21,22,23))
FSI(data = load.table1, items_target = load.table1.items)
devtools::document()
usethis::use_description()
library(facomplex)
data("fullclean")
force(fullclean)
load.table1
Hofmann(data = load.table1[, 2:4])
BSI(data = load.table1[, 2:4])
KC(data = load.table1[, 2:4])
load.table1.items <- list(F1 = c(1,4,6,11,13,15,17,18,20),
F2 = c(9,10,11,12,13,14,15,16),
F3 = c(17,18,19,20,21,22,23))
FSI(data = load.table1, items_target = load.table1.items)
FSI(data = load.table1, items_target = load.table1.items)
load.table1.items <- list(F1 = c(1,2,3,4,5,6,7,8,9),
F2 = c(10,11,12,13,14,15,16,17),
F3 = c(18,19,20,21,22,23))
FSI(data = load.table1, items_target = load.table1.items)
ex1_data <- data.frame(
F1 = c(0.536, 0.708, 0.600, 0.673, 0.767, 0.481, -0.177, 0.209, -0.097, -0.115, 0.047, 0.024),
F2 = c(-0.110, 0.026, 0.076, 0.011, -0.160, 0.106, 0.668, 0.438, 0.809, 0.167, 0.128, 0.041),
F3 = c(-0.100, 0.036, 0.086, 0.021, -0.150, 0.116, 0.678, 0.448, 0.819, 0.577, 0.738, 0.751))
Hofmann(ex1_data)
BSI(data = ex1_data)
BSI(data = ex1_data, sort_items = "up")
BSI(data = ex1_data, item_names = seq(1:12), sort_items = "down")
FSI.out <- FSI(data = ex1_data,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
FSI.out
load.table1
load.table1.items <- list(F1 = c(1,2,3,4,5,6,7,8,9),
F2 = c(10,11,12,13,14,15,16,17),
F3 = c(18,19,20,21,22,23))
FSI(data = load.table1, items_target = load.table1.items)
class(load.table1)
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
load.table1.items <- list(F1 = c(1,2,3,4,5,6,7,8,10),
F2 = c(9,11,12,13,14,15,16,17),
F3 = c(18,19,20,21,22,23))
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
profile.facomplex(load.table1[, 2:4])
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
library(facomplex)
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
load.table1.items <- list(F1 = c(1,2,3,4,5,6,7,8,9),
F2 = c(10,11,12,13,14,15,16,17),
F3 = c(18,19,20,21,22,23))
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
profile.facomplex(load.table1[, 2:4])
facomplex::profile.facomplex(load.table1[, 2:4])
devtools::document()
facomplex::profile.facomplex(load.table1[, 2:4])
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
load.table1.items <- list(F1 = c(1,2,3,4,5,6,7,8,10),
F2 = c(9,11,12,13,14,15,16,17),
F3 = c(18,19,20,21,22,23))
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
devtools::document()
load.table
load.table1
load.table1.items <- list(F1 = c(1,2,3,4,5,6,7,8,10),
F2 = c(9,11,12,13,14,15,16,17),
F3 = c(18,19,20,21,22,23))
FSI(data = load.table1, items_target = load.table1.items, item_col = "Item")
FSI(data = load.table1, items_target = load.table1.items, item_col = "Item")
FSI(data = load.table1, items_target = load.table1.items, item_col = "item")
#'                                                   rstarts = 30,
#'                                                   algorithm = "gpa",
#'                                                   std.ov = TRUE))
#'
#' FSI(data = lavInspect(INV.esem.fit, what = "std")$lambda,
#'     items_target = list(f1 = c(1, 2, 3, 4, 5, 6),
#'                         f2 = c(7, 8, 9, 10, 11, 12)))
#'
#' @author Tu Nombre
#' @export
FSI <- function(data, items_target) {
# Convert matrices to data frame
if (is.matrix(data)) {
data <- as.data.frame(data)
}
# Verify that data is a data frame
if (!is.data.frame(data)) {
stop("The argument 'data' must be a data frame or a matrix")
}
# Get row names if available
row_names <- rownames(data)
if (is.null(row_names) || all(row_names == "")) {
row_names <- paste0("FSI_", seq_len(nrow(data)))
}
# Square all factor loadings
data_squared <- data^2
# Initialize lists to store results
FSI_F <- list()
FSI_i <- list()
# Initialize variables for total calculation
SSTF_total <- 0
SS_NTF_total <- 0
# Compute FSI_F for each factor
for (factor in names(items_target)) {
# Get the index of target items for the current factor
target_rows <- items_target[[factor]]
# Compute the sum of squared target items (SSTF)
SSTF <- sum(data_squared[target_rows, factor])
# Compute the sum of squared non-target items (SS-NTF)
all_rows <- 1:nrow(data_squared)
no_target_rows <- setdiff(all_rows, target_rows)
SS_NTF <- sum(data_squared[no_target_rows, factor])
# Compute RATIO
RATIO <- SS_NTF / SSTF
# Compute FSI_F
FSI_F[[factor]] <- 1 - RATIO
# Accumulate for total calculation
SSTF_total <- SSTF_total + SSTF
SS_NTF_total <- SS_NTF_total + SS_NTF
# Compute FSI_i for each target item in the current factor
for (item in target_rows) {
target_loading <- data_squared[item, factor]
sum_non_target <- sum(data_squared[item, setdiff(names(data), factor)])
# Compute FSI_i for the current item
FSI_i[[row_names[item]]] <- 1 - (sum_non_target / target_loading)
}
}
# Compute FSI_total
RATIO_total <- SS_NTF_total / SSTF_total
FSI_total <- 1 - RATIO_total
# Create lists for results
result_list <- list(
FSI_total = FSI_total,
FSI_F = FSI_F,
FSI_i = data.frame(
Items = names(FSI_i),
FSI_i = round(unlist(FSI_i), 3),
row.names = NULL  # Remove automatic row names
)
)
# Format and round results
result_list$FSI_total <- round(result_list$FSI_total, 3)
result_list$FSI_F <- sapply(result_list$FSI_F, round, 3)
return(result_list)
}
devtools::document()
rm(FSI())
rm(FSI)
devtools::document()
FSI(data = load.table1, items_target = load.table1.items, item_col = "item")
load.table1.items <- list(F1 = c(1,2,3,4,5,6,7,8,10),
F2 = c(9,11,12,13,14,15,16,17),
F3 = c(18,19,20,21,22,23))
FSI(data = load.table1, items_target = load.table1.items)
load.table1.items <- list(F1 = c(1,2,3,4,5,6,7,8,9),
F2 = c(10,11,12,13,14,15,16,17),
F3 = c(18,19,20,21,22,23))
FSI(data = load.table1, items_target = load.table1.items)
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
devtools::document()
load.table1.items <- list(F1 = c(1,2,3,4,5,6,7,8,9),
F2 = c(10,11,12,13,14,15,16,17),
F3 = c(18,19,20,21,22,23))
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
load.table2.items <- list(F1 = c(1,2,3,4,5,6,7,8,10),
F2 = c(9,11,12,13,14,15,16,17),
F3 = c(18,19,20,21,22,23))
load.table2.items <- list(F1 = c(1,2,3,4,5,6,7,8,10),
F2 = c(9,11,12,13,14,15,16,17),
F3 = c(18,19,20,21,22,23))
FSI(data = load.table1[, 2:4], items_target = load.table2.items)
devtools::document()
FSI(data = load.table2[, 2:4], items_target = load.table2.items)
load.table2 <- read.table(file = "clipboard", sep = "\t", header=TRUE)
load.table2.items <- list(F1 = c(1,3,4,5,6,7,8,9, 11),
F2 = c(2,10,12,13,14,15,16,17),
F3 = c(18,19,20,21,22,23))
FSI(data = load.table2[, 2:4], items_target = load.table2.items)
facomplex::profile.facomplex(load.table1[, 2:4])
devtools::document()
devtools::load_all()
facomplex::profile.facomplex(load.table1[, 2:4])
devtools::install()
facomplex::profile.facomplex(load.table1[, 2:4])
facomplex::profile,facomplex(load.table1[, 2:4])
devtools::document()
devtools::document()
facomplex::profileFacomplex(load.table1[, 2:4])
?profileFacomplex
facomplex::profileFacomplex(load.table1[, 2:4])
devtools::document()
devtools::load_all()
devtools::install()
facomplex::profileFacomplex(load.table1[, 2:4])
facomplex::profileFacomplex(load.table1[, 2:4],target = load.table2.items)
devtools::document()
devtools::load_all()
devtools::install()
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
unlink("~/.Rcache", recursive = TRUE)
unlink("~/.Rbuildignore", recursive = TRUE)
devtools::document()
devtools::install()
remove.packages("facomplex")
unlink("~/.Rcache", recursive = TRUE)
unlink("~/.Rbuildignore", recursive = TRUE)
devtools::document()
remove.packages("facomplex")
unlink("~/.Rcache", recursive = TRUE)
unlink("~/.Rbuildignore", recursive = TRUE)
devtools::document()
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
.rs.restartR()
devtools::document()
devtools::install()
facomplex::profileFacomplex(load.table1[, 2:4],target = load.table2.items)
load.table1[, 2:4]
facomplex::profileFacomplex(loadings = load.table1[, 2:4], target = load.table2.items)
FSI.out
FSI.out
??facomplex
facomplex::plotFacomplex(data = FSI.out, item.col = "Items",value.col = "FSI_i")
facomplex::plotFacomplex(data = FSI.out$FSI_i, item.col = "Items",value.col = "FSI_i")
detach("package:facomplex", unload = TRUE)
devtools::document()
devtools::install()
library(facomplex)
FSI(data = load.table1[, 2:4], items_target = load.table1.items)
Hofmann(data = load.table1[, 2:4])
BSI(data = load.table1[, 2:4])
KC(data = load.table1[, 2:4])
FSI(data = load.table2[, 2:4], items_target = load.table2.items)
FSI.out$FSI_i
Hofmann(data = load.table1[, 2:4])
library(facomplex)
plot.simplicity(data = FSI.out$FSI_i,
item.col = "Items",
value.col = "FSI_i",
title = , sort.items = "none",
theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = T)
library(facomplex)
plot.simplicity(data = FSI.out$FSI_i,
item.col = "Items",
value.col = "FSI_i",
title = , sort.items = "none",
theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = T)
devtools::install()
facomplex::plotFacomplex(data = FSI.out$FSI_i, item.col = "Items",value.col = "FSI_i")
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
library(facomplex)
library(facomplex)
Hofmann(ex1_data)
BSI(data = ex1_data)
BSI(data = ex1_data, sort_items = "up")
BSI(data = ex1_data, item_names = seq(1:12), sort_items = "down")
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
profileFacomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
FSI.out <- FSI(data = ex1_data,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
FSI.out
plotFacomplex(data = FSI.out$FSI_i,
item.col = "Items",
value.col = "FSI_i",
title = , sort.items = "none",
theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = T)
usethis::use_vignette("intro_facomplex")
browseVignettes("facomplex")
citation("facomplex")
load.table2
load.table2
remove.packages("facomplex")
unlink("~/.Rcache", recursive = TRUE)
