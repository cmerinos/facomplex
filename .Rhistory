FSI_i <- list()
# Initialize variables for total calculation
SSTF_total <- 0
SS_NTF_total <- 0
# Compute FSI_F for each factor
for (factor in names(items_target)) {
# Get the index of target items for the current factor
target_rows <- items_target[[factor]]
# Compute the sum of squared target items (SSTF)
SSTF <- sum(data_squared[target_rows, factor])
# Compute the sum of squared non-target items (SS-NTF)
all_rows <- 1:nrow(data_squared)
no_target_rows <- setdiff(all_rows, target_rows)
SS_NTF <- sum(data_squared[no_target_rows, factor])
# Compute RATIO
RATIO <- SS_NTF / SSTF
# Compute FSI_F
FSI_F[[factor]] <- 1 - RATIO
# Accumulate for total calculation
SSTF_total <- SSTF_total + SSTF
SS_NTF_total <- SS_NTF_total + SS_NTF
# Compute FSI_i for each target item in the current factor
for (item in target_rows) {
target_loading <- data_squared[item, factor]
sum_non_target <- sum(data_squared[item, setdiff(names(data), factor)])
# Compute FSI_i for the current item
FSI_i[[row_names[item]]] <- 1 - (sum_non_target / target_loading)
}
}
# Compute FSI_total
RATIO_total <- SS_NTF_total / SSTF_total
FSI_total <- 1 - RATIO_total
# Create lists for results
result_list <- list(
FSI_total = FSI_total,
FSI_F = FSI_F,
FSI_i = data.frame(
Items = names(FSI_i),
FSI_i = round(unlist(FSI_i), 3),
row.names = NULL  # Remove automatic row names
)
)
# Format and round results
result_list$FSI_total <- round(result_list$FSI_total, 3)
result_list$FSI_F <- sapply(result_list$FSI_F, round, 3)
return(result_list)
}
fa.load
FSI(data = fa.load, items_target = list(ULS1 = 1,2,3,4,5), ULS2 = 6,7,8,9,10)
FSI(data = fa.load, items_target = list(ULS1 = c(1,2,3,4,5), ULS2 = c(6,7,8,9,10)))
FSI(data = fa.load, items_target = list(ULS1 = c(6,7,8,9,10), ULS2 = c(1,2,3,4,5)))
#' Kaiser, H. F., & Cerny, B. A. (1978). Factor analysis of the image covariance matrix. \emph{Psychological Bulletin}, 85(6), 1272–1284.
#' Kendall, M. G., & Stuart, A. (1969). \emph{The Advanced Theory of Statistics}, Vol. 2. London: Griffin.
#'
#' @examples
#' # Simulated example
#' set.seed(123)
#' loadings <- matrix(runif(30, -1, 1), nrow = 10, ncol = 3)
#' KC(loadings)
#'
#' @export
KC <- function(data, b = 4) {
# Ensure numeric matrix
if (!is.matrix(data)) {
data <- as.matrix(data)
}
if (b <= 0) {
stop("The parameter 'b' must be a positive number.")
}
m <- nrow(data)
p <- ncol(data)
# Compute f_j for each factor
fj_values <- apply(data^2, 2, function(factor) {
term <- sum(factor^(1 / b)) / m
term^(b / 2)
})
ideal_hyperplane_count <- m * (p - 1)
# Output results
cat("Kaiser-Cerny Factor Simplicity Analysis:\n")
cat("- Simplicity index f_j for each factor:\n")
for (i in 1:length(fj_values)) {
cat(paste0("  F", i, ": ", round(fj_values[i], 6), "\n"))
}
cat("\n- Ideal hyperplane count: ", ideal_hyperplane_count, "\n")
}
#'
#' lsi <- LSI(ex1_data)
#' cat("Global LSI:", lsi, "\n")
#'
#'@seealso
#'\code{\link{BSI}} for Bentler’s index, \code{\link{FSI}} for Fleming’s index, and \code{\link{plot_simplicity}}
#'for visual inspection of loadings.
#'
#' @author Cesar Merino-Soto
#' @export
LSI <- function(loadings) {
if (!is.matrix(loadings) && !is.data.frame(loadings)) {
stop("The argument 'loadings' must be a matrix or data frame.")
}
B <- as.matrix(loadings)
r <- ncol(B)
epsilon <- 1e-6
# Weighted complexity per item (not reported)
w_items <- apply(B, 1, function(row) {
sum((row^2 + epsilon) * 10^(row^2)) / r
})
# Global average
w_global <- mean(w_items)
# Minimum possible value (theoretical lower bound)
e <- (1 / r) * sum((1 / (1 + epsilon)) * 10^epsilon)
# Normalized LSI
LSI_global <- (w_global - e) / (1 - e)
return(round(LSI_global, 4))
}
fa.load
LSI(fa.load)
KC(data = fa.load)
fa.output$loadings
unclass(fa.output$loadings)
fa.output[["loadings"]]
##
BSI(fa.load)
devtools::build_vignettes()
LSI(fa.load)
fa.load
#'
#' lsi <- LSI(ex1_data)
#' cat("Global LSI:", lsi, "\n")
#'
#'@seealso
#'\code{\link{BSI}} for Bentler’s index, \code{\link{FSI}} for Fleming’s index, and \code{\link{plot_simplicity}}
#'for visual inspection of loadings.
#'
#' @author Cesar Merino-Soto
#' @export
LSI <- function(loadings) {
if (!is.matrix(loadings) && !is.data.frame(loadings)) {
stop("The argument 'loadings' must be a matrix or data frame.")
}
L <- as.matrix(loadings)
p <- nrow(L)  # Number of items
r <- ncol(L)  # Number of factors
epsilon <- 1e-6
# Paso 1: Normalización por columnas
col_norms <- sqrt(colSums(L^2))
Lc <- sweep(L, 2, col_norms, "/")
# Paso 2: Normalización por filas
row_norms <- sqrt(rowSums(Lc^2))
B <- sweep(Lc, 1, row_norms, "/")
# Paso 3: Cálculo de w (complejidad promedio ponderada)
w <- mean(apply(B, 1, function(row) {
sum((row^2 + epsilon) * 10^(row^2)) / r
}))
# Paso 4: Valor mínimo teórico (e) cuando las cargas están distribuidas uniformemente
bij <- rep(1 / sqrt(r), r)
e <- sum((bij^2 + epsilon) * 10^(bij^2)) / r
# Paso 5: Índice final
LSI_global <- (w - e) / (1 - e)
return(round(LSI_global, 4))
}
LSI(fa.load)
browseVignettes("facomplex")
usethis::use_data()
data(package = "facomplex")
devtools::document()
###########################################
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
###########################################
detach("package:facomplex", unload = TRUE)
.rs.restartR()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
library(facomplex)
data("fullclean")
library(facomplex)
library(facomplex)
ex1_data <- data.frame(
F1 = c(0.536, 0.708, 0.600, 0.673, 0.767, 0.481, -0.177, 0.209, -0.097, -0.115, 0.047, 0.024),
F2 = c(-0.110, 0.026, 0.076, 0.011, -0.160, 0.106, 0.668, 0.438, 0.809, 0.167, 0.128, 0.041),
F3 = c(-0.100, 0.036, 0.086, 0.021, -0.150, 0.116, 0.678, 0.448, 0.819, 0.577, 0.738, 0.751))
LSI(ex1_data)
FSI(data = ex1_data)
FSI.out <- FSI(data = ex1_data,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
FSI.out
BSI(data = ex1_data)
Hofmann(ex1_data)
BSI(data = ex1_data)
BSI(data = ex1_data, sort_items = "up")
BSI(data = ex1_data, item_names = seq(1:12), sort_items = "down")
#' @description Summarizes descriptive statistics of target and cross-loadings by factor.
#' @param loadings A numeric matrix or data.frame of factor loadings (rows = items, columns = factors).
#' @param target A named list indicating which items belong to each factor. Names must match columns of `loadings`.
#' @param abs Logical. Should absolute loadings be used? Default is TRUE.
#' @param digits Integer. Number of decimal places to round. Default is 3.
#'
#' @return A data.frame summarizing target and cross-loading characteristics per factor.
#' @examples
#' profile.facomplex(loadings = myloadings,
#'                   target = list(F1 = c("item1", "item2"), F2 = c("item3", "item4")))
profile.facomplex <- function(loadings, target, abs = TRUE, digits = 3) {
if (!is.matrix(loadings) && !is.data.frame(loadings)) {
stop("`loadings` must be a matrix or data.frame.")
}
loadings <- as.data.frame(loadings)
# Asegura nombres de filas
if (is.null(rownames(loadings))) {
stop("`loadings` must have row names corresponding to item names.")
}
# Verifica que los nombres en `target` existan en las columnas de `loadings`
if (!all(names(target) %in% colnames(loadings))) {
stop("All names in `target` must match column names of `loadings`.")
}
# Si se desea, toma valores absolutos
if (abs) loadings <- abs(loadings)
result <- data.frame()
for (f in names(target)) {
items_f <- target[[f]]
other_factors <- setdiff(colnames(loadings), f)
# Verifica que los ítems existan
if (!all(items_f %in% rownames(loadings))) {
stop(paste("Some items in", f, "are not row names in `loadings`."))
}
# Extrae las cargas target y cruzadas
load_f <- loadings[items_f, , drop = FALSE]
target_vals <- load_f[[f]]
cross_vals <- as.matrix(load_f[, other_factors, drop = FALSE])
# Estadísticas
mean_target <- mean(target_vals)
median_target <- median(target_vals)
sd_target <- sd(target_vals)
mean_cross <- mean(cross_vals)
median_cross <- median(cross_vals)
sd_cross <- sd(cross_vals)
# Porcentaje de cargas cruzadas > .10, .20, .30
n_cross <- length(cross_vals)
p10 <- mean(cross_vals > .10) * 100
p20 <- mean(cross_vals > .20) * 100
p30 <- mean(cross_vals > .30) * 100
result <- rbind(result, data.frame(
Factor = f,
Mean_Target = round(mean_target, digits),
Median_Target = round(median_target, digits),
SD_Target = round(sd_target, digits),
Mean_Cross = round(mean_cross, digits),
Median_Cross = round(median_cross, digits),
SD_Cross = round(sd_cross, digits),
Perc_Cross_GT10 = round(p10, 1),
Perc_Cross_GT20 = round(p20, 1),
Perc_Cross_GT30 = round(p30, 1),
n_Items = length(items_f)
))
}
rownames(result) <- NULL
return(result)
}
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
FSI.out
devtools::document()
#'
#' @param loadings A numeric matrix or data.frame of factor loadings (rows = items, columns = factors).
#' @param target A named list indicating which items belong to each factor. Names must match columns of `loadings`, and values are character vectors of item names (row names in `loadings`).
#' @param abs Logical. Should absolute loadings be used? Default is TRUE.
#' @param cutoff Optional numeric. If specified, reports % of cross-loadings ≤ and > this value. Default is NULL.
#' @param digits Number of decimals to round. Default is 3.
#'
#' @return A data.frame with descriptive statistics (rows) for each factor (columns).
#' @examples
#' # See example below
profile.facomplex <- function(loadings, target, abs = TRUE, cutoff = NULL, digits = 3) {
if (!is.matrix(loadings) && !is.data.frame(loadings)) {
stop("`loadings` must be a matrix or data.frame.")
}
loadings <- as.data.frame(loadings)
# Verifica nombres de fila
if (is.null(rownames(loadings))) {
stop("`loadings` must have row names (item names).")
}
# Verifica que los nombres de factores estén en las columnas
if (!all(names(target) %in% colnames(loadings))) {
stop("All names in `target` must match column names in `loadings`.")
}
# Usa valores absolutos si se indica
if (abs) loadings <- abs(loadings)
result_list <- list()
for (f in names(target)) {
items_f <- target[[f]]
other_factors <- setdiff(colnames(loadings), f)
# Verifica existencia de ítems
if (!all(items_f %in% rownames(loadings))) {
stop(paste("Some items for factor", f, "are not found in `loadings`."))
}
load_f <- loadings[items_f, , drop = FALSE]
target_vals <- load_f[[f]]
cross_vals <- as.matrix(load_f[, other_factors, drop = FALSE])
# Estadísticos descriptivos
stat <- c(
Mean.Target = mean(target_vals),
Median.Target = median(target_vals),
SD.Target = sd(target_vals),
Mean.Cross = mean(cross_vals),
Median.Cross = median(cross_vals),
SD.Cross = sd(cross_vals)
)
# Si hay cutoff, calcular % por debajo/encima
if (!is.null(cutoff)) {
total_cross <- length(cross_vals)
below <- mean(cross_vals <= cutoff) * 100
above <- mean(cross_vals > cutoff) * 100
cutoff.label <- formatC(cutoff, format = "f", digits = 2)
stat[paste0("Perc.Cross.≤.", cutoff.label)] <- below
stat[paste0("Perc.Cross.>.", cutoff.label)] <- above
}
stat["n.Items"] <- length(items_f)
result_list[[f]] <- round(stat, digits)
}
# Convertir lista a data.frame largo
df <- do.call(cbind, result_list)
stat_names <- rownames(df)
df <- data.frame(Statistic = stat_names, df, row.names = NULL)
return(df)
}
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
detach("package:facomplex", unload = TRUE)
devtools::document()
###########################################
detach("package:facomplex", unload = TRUE)
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
data("fullclean")
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
library(facomplex)
?profile.facomplex
devtools::document()
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
#'                      .10, .70), ncol = 2, byrow = TRUE)
#' rownames(loadings) <- c("item1", "item2", "item3", "item4")
#' colnames(loadings) <- c("F1", "F2")
#'
#' target <- list(F1 = c("item1", "item2"),
#'                F2 = c("item3", "item4"))
#'
#' profile.facomplex(loadings, target, cutoff = 0.30)
#'
#' @export
profile.facomplex <- function(loadings, target, abs = TRUE, cutoff = NULL, digits = 3) {
if (!is.matrix(loadings) && !is.data.frame(loadings)) {
stop("`loadings` must be a matrix or data.frame.")
}
loadings <- as.data.frame(loadings)
if (is.null(rownames(loadings))) {
stop("`loadings` must have row names (item names).")
}
if (!all(names(target) %in% colnames(loadings))) {
stop("All names in `target` must match column names in `loadings`.")
}
if (abs) loadings <- abs(loadings)
result_list <- list()
for (f in names(target)) {
items_f <- target[[f]]
other_factors <- setdiff(colnames(loadings), f)
if (!all(items_f %in% rownames(loadings))) {
stop(paste("Some items for factor", f, "are not found in `loadings`."))
}
load_f <- loadings[items_f, , drop = FALSE]
target_vals <- load_f[[f]]
cross_vals <- as.matrix(load_f[, other_factors, drop = FALSE])
stat <- c(
Mean.Target = mean(target_vals),
Median.Target = median(target_vals),
SD.Target = sd(target_vals),
Min.Target = min(target_vals),
Max.Target = max(target_vals),
Mean.Cross = mean(cross_vals),
Median.Cross = median(cross_vals),
SD.Cross = sd(cross_vals),
Min.Cross = min(cross_vals),
Max.Cross = max(cross_vals)
)
if (!is.null(cutoff)) {
total_cross <- length(cross_vals)
below <- mean(cross_vals <= cutoff) * 100
above <- mean(cross_vals > cutoff) * 100
cutoff.label <- formatC(cutoff, format = "f", digits = 2)
stat[paste0("Perc.Cross.≤.", cutoff.label)] <- below
stat[paste0("Perc.Cross.>.", cutoff.label)] <- above
}
stat["n.Items"] <- length(items_f)
result_list[[f]] <- round(stat, digits)
}
df <- do.call(cbind, result_list)
stat_names <- rownames(df)
df <- data.frame(Statistic = stat_names, df, row.names = NULL)
return(df)
}
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
?profile.facomplex
??profile.facomplex
?profile.facomplex
library(facomplex)
detach("package:facomplex", unload = TRUE)
library(facomplex)
detach("package:facomplex", unload = TRUE)
library(facomplex)
detach("package:facomplex", unload = TRUE)
library(facomplex)
remove.packages("facomplex")
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
devtools::document()
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
library(facomplex)
ex1_data <- data.frame(
F1 = c(0.536, 0.708, 0.600, 0.673, 0.767, 0.481, -0.177, 0.209, -0.097, -0.115, 0.047, 0.024),
F2 = c(-0.110, 0.026, 0.076, 0.011, -0.160, 0.106, 0.668, 0.438, 0.809, 0.167, 0.128, 0.041),
F3 = c(-0.100, 0.036, 0.086, 0.021, -0.150, 0.116, 0.678, 0.448, 0.819, 0.577, 0.738, 0.751))
Hofmann(ex1_data)
BSI(data = ex1_data)
BSI(data = ex1_data, sort_items = "up")
BSI(data = ex1_data, item_names = seq(1:12), sort_items = "down")
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1,)
FSI.out <- FSI(data = ex1_data,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
FSI.out
?profile.facomplex
library(facomplex)
detach("package:facomplex", unload = TRUE)
library(facomplex)
detach("package:facomplex", unload = TRUE)
library(facomplex)
detach("package:facomplex", unload = TRUE)
remove.packages("facomplex")
unlink("~/.Rcache", recursive = TRUE)
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
library(facomplex)
library(facomplex)
detach("package:facomplex", unload = TRUE)
data("fullclean")
Hofmann(ex1_data)
library(facomplex)
############## facomplex #############################
detach("package:facomplex", unload = TRUE)
devtools::install_github("cmerinos/facomplex", build_vignettes = TRUE)
library(facomplex)
Hofmann(ex1_data)
BSI(data = ex1_data)
BSI(data = ex1_data, sort_items = "up")
BSI(data = ex1_data, item_names = seq(1:12), sort_items = "down")
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
browseVignettes("facomplex")
citation("facomplex")
devtools::document()
profile.facomplex(loadings = ex1_data, target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)), cutoff = .1)
FSI.out <- FSI(data = ex1_data,
items_target = list(F1 = c(1, 2, 3, 4, 5, 6),
F2 = c(7, 8, 9),
F3 = c(10, 11, 12)))
FSI.out
?profile.facomplex
plot.simplicity(data = FSI.out$FSI_i,
item.col = "Items",
value.col = "FSI_i",
title = , sort.items = "none",
theme = "classic",
bar.color = "black",
threshold.line = .90,
threshold.color = "red", reverse.items = T)
FSI.out
FSI(data = ex1_data,
items_target = list(F1 = c(7, 2, 3, 4, 5, 6),
F2 = c(1, 8, 9),
F3 = c(10, 11, 12)))
load.table1 <- read.table(file = "clipboard", sep = "\t", header=TRUE)
Chofman(data = load.table1[, 2:4])
Hofmann(data = load.table1[, 2:4])
BSI(data = load.table1[, 2:4])
KC(data = load.table1[, 2:4])
load.table1.items <- list(F1 = c(1,2,3,4,5,6,7,8),
F2 = c(9,10,11,12,13,14,15,16),
F3 = c(17,18,19,20,21,22,23))
load.table1
FSI(datos = load.table1, items_target = load.table1.items)
FSI(data = load.table1, items_target = load.table1.items)
load.table1.items <- list(F1 = c(1,4,6,11,13,15,17,18,20),
F2 = c(9,10,11,12,13,14,15,16),
F3 = c(17,18,19,20,21,22,23))
FSI(data = load.table1, items_target = load.table1.items)
devtools::document()
usethis::use_description()
